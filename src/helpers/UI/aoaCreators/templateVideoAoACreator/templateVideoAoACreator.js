/* функция принимает массив объектов с информацией из стейта по книге которая выгружена из АРМ Видео
    возвращает массив массивов для формирования книги для Шаблона Видео
*/
import { getDirectionByCode } from "../../../common/getDirectionByCode/getDirectionByCode";


export function createTemplateVideoAoA(data) {
  let dataToWrite = [];                                   //массив массивов для конвертации его в xslx и записи в выходную книгу

  // Шапка таблицы
  dataToWrite.push([
    "Номер записи", "Дата проезда", "Дата расшифровки", "Направление", "Станция",
    "ПЧ", "Путь", "КМ", "ПК", "М", "Нить", "Замечание", "Накладка в стыке", "Уст", "Огр. скорости",
    "Величина (только цифра, без мм)", "Рег", "Класс пути", "Радиус кривой", "Подрельсовое основание дерево/бетон", "Наличие повтора ( количество раз поторилось)",
    "Величина при предыдущем проходе (в случае повтора)", "Дата предудущего прохода (в случае повтора)",
    "Код замечания", "перегон предыдущего повтора подвижки", "Тип пути (зв./ бп)"
  ]);

  data.forEach((item, i) => {
    const arr = [];                   // этот массив используется для пуша в него всех данных по одной неисправности, чтобы потом получить массив массивов всех неисправности и преобразовать его в лист excel

    // --------------- Направление ---------------------
    const directionCode = item["П-Н"].split(" - ")[1];      // разделим чтобы вычленить [1] элемент массива, это как раз код направление
    const direction = getDirectionByCode(+directionCode);
    // --------------- / Направление -------------------


    arr.push(
      ++i, "", "", direction,
    );   // массив одна неисправность

    dataToWrite.push(arr);        // запушим массив с одной неисправностью в массив со всеми неисправностями. Будем пошить каждую неисправность
  });

  return dataToWrite;
}